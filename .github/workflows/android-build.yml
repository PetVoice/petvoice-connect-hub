name: Build Android AAB - CLEAN FINAL
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: Build web app
        run: npm run build
        
      - name: Initialize Capacitor if needed
        run: |
          if [ ! -f "capacitor.config.ts" ] && [ ! -f "capacitor.config.js" ]; then
            echo "🚀 Initializing Capacitor..."
            npx cap init "PetVoice" "com.petvoice.connect.v6" --web-dir="dist"
            echo "✅ Capacitor initialized"
          fi
          
      - name: Show Capacitor config
        run: |
          echo "=== CAPACITOR CONFIG ==="
          if [ -f "capacitor.config.ts" ]; then
            cat capacitor.config.ts
          elif [ -f "capacitor.config.js" ]; then
            cat capacitor.config.js
          fi
          
      - name: Add Android platform
        run: |
          if [ ! -d "android" ]; then
            echo "Adding Android platform..."
            npx cap add android
          fi
          
      - name: Sync Capacitor
        run: npx cap sync android
        
      - name: Generate release keystore
        run: |
          cd android/app
          mkdir -p keystore
          keytool -genkeypair -v \
            -keystore keystore/release.keystore \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -alias petvoice \
            -storepass petvoice123 \
            -keypass petvoice123 \
            -dname "CN=PetVoice Connect, OU=Development, O=PetVoice Inc, L=Rome, S=Lazio, C=IT" \
            -storetype JKS
          echo "✅ Keystore generated"
          
      - name: Show keystore SHA1
        run: |
          cd android/app
          echo "=== KEYSTORE SHA1 FINGERPRINT ==="
          keytool -list -v -keystore keystore/release.keystore -storepass petvoice123 | grep SHA1
          
      - name: Configure signing properties
        run: |
          cd android/app
          cat > keystore.properties << EOF
          storePassword=petvoice123
          keyPassword=petvoice123
          keyAlias=petvoice
          storeFile=keystore/release.keystore
          EOF
          echo "✅ Signing properties configured"
          
      - name: Update build.gradle for signing
        run: |
          cd android/app
          cp build.gradle build.gradle.bak
          cat > build.gradle << 'EOF'
          apply plugin: 'com.android.application'

          def keystorePropertiesFile = rootProject.file("app/keystore.properties")
          def keystoreProperties = new Properties()
          keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

          android {
              namespace "com.petvoice.connect.v6"
              compileSdk rootProject.ext.compileSdkVersion
              defaultConfig {
                  applicationId "com.petvoice.connect.v6"
                  minSdkVersion rootProject.ext.minSdkVersion
                  targetSdkVersion rootProject.ext.targetSdkVersion
                  versionCode 8
                  versionName "1.0.7"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                  aaptOptions {
                       ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
                  }
              }
              signingConfigs {
                  release {
                      keyAlias keystoreProperties['keyAlias']
                      keyPassword keystoreProperties['keyPassword']
                      storeFile file(keystoreProperties['storeFile'])
                      storePassword keystoreProperties['storePassword']
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                  }
              }
          }

          repositories {
              google()
              mavenCentral()
          }

          dependencies {
              implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
              implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
              implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
              implementation project(':capacitor-android')
              testImplementation "junit:junit:$junitVersion"
              androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
              androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
              implementation project(':capacitor-cordova-android-plugins')
          }

          apply from: 'capacitor.build.gradle'

          try {
              def servicesJSON = file('google-services.json')
              if (servicesJSON.text) {
                  apply plugin: 'com.google.gms.google-services'
              }
          } catch(Exception e) {
              logger.info("google-services.json not found")
          }
          EOF
          echo "✅ build.gradle updated"
          
      - name: Make gradlew executable
        run: chmod +x android/gradlew
        
      - name: Clean and build AAB
        run: |
          cd android
          echo "=== CLEANING ==="
          ./gradlew clean
          echo "=== BUILDING RELEASE AAB ==="
          ./gradlew bundleRelease --stacktrace
          
      - name: Verify AAB created
        run: |
          AAB_PATH="android/app/build/outputs/bundle/release/app-release.aab"
          if [ -f "$AAB_PATH" ]; then
            echo "✅ AAB created successfully"
            echo "File size: $(du -h $AAB_PATH | cut -f1)"
            ls -la "$AAB_PATH"
          else
            echo "❌ AAB not found"
            find android -name "*.aab" -type f
            exit 1
          fi
          
      - name: Verify AAB signing
        run: |
          AAB_PATH="android/app/build/outputs/bundle/release/app-release.aab"
          echo "=== VERIFYING AAB SIGNATURE ==="
          jarsigner -verify "$AAB_PATH" && echo "✅ AAB is signed" || echo "❌ AAB not signed"
          
      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: petvoice-final-aab-v8
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 30
