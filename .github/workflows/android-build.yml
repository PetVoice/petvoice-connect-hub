name: Build Android AAB - BULLETPROOF
on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Install dependencies
        run: npm install --legacy-peer-deps
        
      - name: Build web app
        run: npm run build
        
      - name: Initialize Capacitor
        run: |
          if [ ! -f "capacitor.config.ts" ] && [ ! -f "capacitor.config.js" ]; then
            npx cap init "PetVoice" "com.petvoice.connect.v6" --web-dir="dist"
          fi
          
      - name: Clean and recreate Android platform
        run: |
          # Salva keystore se esiste
          if [ -f "android/app/keystore/release.keystore" ]; then
            echo "🔐 Backing up existing keystore"
            mkdir -p .keystore-backup
            cp android/app/keystore/release.keystore .keystore-backup/
            cp android/app/keystore.properties .keystore-backup/ 2>/dev/null || true
            echo "✅ Keystore backed up"
          fi
          
          # Elimina e ricrea android
          rm -rf android
          npx cap add android
          npx cap sync android
          
          # Ripristina keystore se esisteva
          if [ -f ".keystore-backup/release.keystore" ]; then
            echo "🔐 Restoring backed up keystore"
            mkdir -p android/app/keystore
            cp .keystore-backup/release.keystore android/app/keystore/
            if [ -f ".keystore-backup/keystore.properties" ]; then
              cp .keystore-backup/keystore.properties android/app/
            fi
            echo "✅ Keystore restored - same SHA1!"
          fi
          
      - name: Setup keystore
        run: |
          cd android/app
          mkdir -p keystore
          if [ -f "keystore/release.keystore" ]; then
            echo "Using existing keystore"
          else
            keytool -genkeypair -v -keystore keystore/release.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias petvoice -storepass petvoice123 -keypass petvoice123 -dname "CN=PetVoice Connect, OU=Development, O=PetVoice Inc, L=Rome, S=Lazio, C=IT" -storetype JKS
          fi
          
      - name: Create keystore properties
        run: |
          cd android/app
          echo "storePassword=petvoice123" > keystore.properties
          echo "keyPassword=petvoice123" >> keystore.properties
          echo "keyAlias=petvoice" >> keystore.properties
          echo "storeFile=keystore/release.keystore" >> keystore.properties
          
      - name: Update build.gradle
        run: |
          cd android/app
          cp build.gradle build.gradle.bak
          cat > temp_build.gradle << 'EOF'
          apply plugin: 'com.android.application'
          
          def keystorePropertiesFile = rootProject.file("app/keystore.properties")
          def keystoreProperties = new Properties()
          keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
          
          android {
              namespace "com.petvoice.connect.v6"
              compileSdk rootProject.ext.compileSdkVersion
              defaultConfig {
                  applicationId "com.petvoice.connect.v6"
                  minSdkVersion rootProject.ext.minSdkVersion
                  targetSdkVersion rootProject.ext.targetSdkVersion
                  versionCode 10
                  versionName "1.0.9"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
              signingConfigs {
                  release {
                      keyAlias keystoreProperties['keyAlias']
                      keyPassword keystoreProperties['keyPassword']
                      storeFile file(keystoreProperties['storeFile'])
                      storePassword keystoreProperties['storePassword']
                  }
              }
              buildTypes {
                  release {
                      signingConfig signingConfigs.release
                      minifyEnabled true
                      shrinkResources true
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      debuggable false
                  }
              }
          }
          
          repositories {
              google()
              mavenCentral()
          }
          
          dependencies {
              implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
              implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
              implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
              implementation project(':capacitor-android')
              testImplementation "junit:junit:$junitVersion"
              androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
              androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
              implementation project(':capacitor-cordova-android-plugins')
          }
          
          apply from: 'capacitor.build.gradle'
          EOF
          mv temp_build.gradle build.gradle
          
      - name: Create proguard rules
        run: |
          cd android/app
          cat > proguard-rules.pro << 'EOF'
          -keep class com.getcapacitor.** { *; }
          -keep class com.capacitorjs.** { *; }
          -keep class com.petvoice.** { *; }
          -keepattributes *Annotation*
          -keepattributes SourceFile,LineNumberTable
          EOF
          
      - name: Make gradlew executable
        run: |
          if [ -f "android/gradlew" ]; then
            chmod +x android/gradlew
          fi
          
      - name: Build AAB
        run: |
          cd android
          if [ -f "gradlew" ]; then
            ./gradlew clean bundleRelease --stacktrace
          else
            gradle clean bundleRelease --stacktrace
          fi
          
      - name: Verify AAB
        run: |
          AAB_PATH="android/app/build/outputs/bundle/release/app-release.aab"
          if [ -f "$AAB_PATH" ]; then
            echo "AAB created successfully"
            du -h "$AAB_PATH"
          else
            echo "AAB not found"
            exit 1
          fi
          
      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: petvoice-final-battle-v10
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 30
