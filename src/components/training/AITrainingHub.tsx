import React, { useState, useMemo, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Slider } from '@/components/ui/slider';
import { 
  Brain, 
  Target, 
  TrendingUp, 
  Clock, 
  Award, 
  Users, 
  Play, 
  Pause, 
  CheckCircle, 
  AlertCircle,
  Plus,
  Search,
  Filter,
  Calendar,
  Video,
  FileText,
  BarChart3,
  Lightbulb,
  Zap,
  Heart,
  ChevronRight,
  Star,
  MessageSquare,
  Download,
  Share,
  Sparkles,
  Timer,
  BookOpen,
  Eye,
  ThumbsUp,
  Rocket,
  Shield,
  Upload,
  Camera,
  Mic,
  Bell,
  Settings,
  Wifi,
  WifiOff,
  ChevronDown,
  ChevronUp,
  Send,
  Edit,
  Trash2,
  Copy,
  ExternalLink,
  Loader2,
  X,
  Check,
  ArrowLeft,
  ArrowRight,
  RotateCcw,
  Save,
  Globe,
  Lock,
  Unlock,
  UserCheck,
  TrendingDown,
  Activity,
  Compass,
  Flag
} from 'lucide-react';

// Enhanced Types
interface TrainingProtocol {
  id: string;
  title: string;
  description: string;
  category: string;
  difficulty: 'Facile' | 'Medio' | 'Difficile';
  duration: number;
  progress: number;
  status: 'active' | 'completed' | 'paused' | 'available' | 'suggested';
  petId: string;
  petName: string;
  petAvatar: string;
  targetBehavior: string;
  currentDay: number;
  totalDays: number;
  successRate: number;
  aiGenerated: boolean;
  triggers: string[];
  exercises: Exercise[];
  metrics: ProtocolMetrics;
  createdAt: string;
  lastUpdated: string;
  communityRating: number;
  communityUsage: number;
  mentorRecommended?: boolean;
  integrationSource?: 'analysis' | 'diary' | 'wellness' | 'matching' | 'manual';
  veterinaryApproved: boolean;
  estimatedCost?: number;
  requiredMaterials: string[];
  isPublic: boolean;
  shareCode?: string;
  collaborators: string[];
  notificationsEnabled: boolean;
  schedule: ExerciseSchedule;
}

interface Exercise {
  id: string;
  day: number;
  title: string;
  description: string;
  duration: number;
  type: 'physical' | 'mental' | 'behavioral' | 'social';
  instructions: string[];
  materials: string[];
  videoUrl?: string;
  completed: boolean;
  completedAt?: string;
  feedback?: string;
  effectiveness?: number;
  photos: string[];
  voiceNotes: string[];
  aiAnalysis?: string;
}

interface ProtocolMetrics {
  behaviorImprovement: number;
  stressReduction: number;
  engagementLevel: number;
  ownerSatisfaction: number;
  veterinaryApproval?: boolean;
  communitySuccess: number;
  timeEfficiency: number;
  costEffectiveness: number;
}

interface SuggestedProtocol {
  id: string;
  title: string;
  description: string;
  reason: string;
  source: string;
  confidence: number;
  estimatedSuccess: number;
  similarCases: number;
  category: string;
  difficulty: string;
  duration: number;
  urgency: 'low' | 'medium' | 'high' | 'critical';
  integrationData: any;
  autoGenerated: boolean;
}

interface ExerciseSchedule {
  startDate: string;
  endDate: string;
  dailyTime: string;
  reminderTimes: string[];
  weekdays: number[];
  flexible: boolean;
}

interface ProtocolTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  difficulty: string;
  duration: number;
  exercises: Omit<Exercise, 'id' | 'completed' | 'completedAt' | 'feedback' | 'effectiveness' | 'photos' | 'voiceNotes'>[];
  popularity: number;
  successRate: number;
}

// Mock Current Pet Data (would come from context)
const currentPet = {
  id: 'pet1',
  name: 'Luna',
  species: 'Cane',
  breed: 'Golden Retriever',
  age: 3,
  avatar: '/placeholder.svg',
  behavioralProfile: {
    anxiety: 'high',
    energy: 'high',
    social: 'medium',
    training: 'beginner'
  }
};

// Mock Recent Analysis Data
const recentAnalysisData = {
  emotionalTriggers: ['Ansia da separazione', 'Rumori forti', 'Estranei'],
  dominantEmotions: ['Ansia', 'Agitazione', 'Stress'],
  confidenceScore: 0.87,
  recommendations: ['Protocollo anti-ansia', 'Desensibilizzazione graduale']
};

// Mock Diary Patterns
const diaryPatterns = {
  behavioralTrends: ['Iperattività mattutina', 'Difficoltà separazione', 'Vocalizzazioni eccessive'],
  frequency: 'daily',
  severity: 'moderate',
  duration: 'weeks'
};

// Enhanced Mock Data
const mockProtocols: TrainingProtocol[] = [
  {
    id: '1',
    title: 'Gestione Ansia da Separazione Avanzata',
    description: 'Protocollo AI-generato basato sulle ultime analisi emotive di Luna',
    category: 'Comportamento',
    difficulty: 'Medio',
    duration: 21,
    progress: 65,
    status: 'active',
    petId: currentPet.id,
    petName: currentPet.name,
    petAvatar: currentPet.avatar,
    targetBehavior: 'Riduzione ansia da separazione',
    currentDay: 14,
    totalDays: 21,
    successRate: 89,
    aiGenerated: true,
    triggers: ['Ansia da separazione', 'Rumori forti'],
    exercises: [],
    metrics: {
      behaviorImprovement: 65,
      stressReduction: 70,
      engagementLevel: 80,
      ownerSatisfaction: 85,
      veterinaryApproval: true,
      communitySuccess: 89,
      timeEfficiency: 75,
      costEffectiveness: 90
    },
    createdAt: '2024-01-15',
    lastUpdated: '2024-01-29',
    communityRating: 4.6,
    communityUsage: 234,
    mentorRecommended: true,
    integrationSource: 'analysis',
    veterinaryApproved: true,
    estimatedCost: 120,
    requiredMaterials: ['Kong riempibile', 'Feromoni calmanti', 'Telecamera WiFi'],
    isPublic: true,
    shareCode: 'LUNA-ANX-2024',
    collaborators: ['Dr. Elena Rossi'],
    notificationsEnabled: true,
    schedule: {
      startDate: '2024-01-15',
      endDate: '2024-02-05',
      dailyTime: '09:00',
      reminderTimes: ['08:45', '14:00', '18:30'],
      weekdays: [1, 2, 3, 4, 5, 6, 7],
      flexible: true
    }
  },
  {
    id: '2',
    title: 'Socializzazione Urbana Progressiva',
    description: 'Programma completo per migliorare le interazioni in ambiente urbano',
    category: 'Sociale',
    difficulty: 'Difficile',
    duration: 28,
    progress: 100,
    status: 'completed',
    petId: currentPet.id,
    petName: currentPet.name,
    petAvatar: currentPet.avatar,
    targetBehavior: 'Miglioramento socializzazione urbana',
    currentDay: 28,
    totalDays: 28,
    successRate: 92,
    aiGenerated: true,
    triggers: ['Estranei', 'Ambienti affollati'],
    exercises: [],
    metrics: {
      behaviorImprovement: 92,
      stressReduction: 85,
      engagementLevel: 88,
      ownerSatisfaction: 95,
      veterinaryApproval: true,
      communitySuccess: 87,
      timeEfficiency: 82,
      costEffectiveness: 75
    },
    createdAt: '2024-01-01',
    lastUpdated: '2024-01-28',
    communityRating: 4.8,
    communityUsage: 156,
    mentorRecommended: true,
    integrationSource: 'matching',
    veterinaryApproved: true,
    estimatedCost: 200,
    requiredMaterials: ['Guinzaglio lungo', 'Snack high-value', 'Clicker'],
    isPublic: true,
    shareCode: 'SOCIAL-URB-2024',
    collaborators: ['Luigi Bianchi', 'Community Milano'],
    notificationsEnabled: true,
    schedule: {
      startDate: '2024-01-01',
      endDate: '2024-01-28',
      dailyTime: '16:00',
      reminderTimes: ['15:45', '19:00'],
      weekdays: [1, 2, 3, 4, 5, 6, 7],
      flexible: false
    }
  }
];

const mockSuggestedProtocols: SuggestedProtocol[] = [
  {
    id: 'suggested1',
    title: 'Gestione Stress da Rumori Urbani',
    description: 'Protocollo specializzato per la desensibilizzazione ai rumori della città',
    reason: 'Rilevata sensibilità acustica elevata nelle ultime 3 analisi emotive',
    source: 'Analisi Emotiva AI + Dati Ambientali',
    confidence: 94,
    estimatedSuccess: 87,
    similarCases: 89,
    category: 'Comportamento',
    difficulty: 'Medio',
    duration: 18,
    urgency: 'high',
    integrationData: {
      triggerAnalysis: recentAnalysisData.emotionalTriggers,
      behavioralCorrelations: diaryPatterns.behavioralTrends
    },
    autoGenerated: true
  },
  {
    id: 'suggested2',
    title: 'Programma Fitness Canino Intelligente',
    description: 'Piano di esercizi personalizzato basato su età, razza e livello di energia',
    reason: 'Rilevato aumento di peso del 8% e diminuzione attività fisica dal diario',
    source: 'Monitoraggio Benessere + Diary Patterns',
    confidence: 91,
    estimatedSuccess: 94,
    similarCases: 156,
    category: 'Fisico',
    difficulty: 'Facile',
    duration: 21,
    urgency: 'medium',
    integrationData: {
      healthMetrics: { weight: '+8%', activity: '-23%' },
      breed: currentPet.breed
    },
    autoGenerated: true
  },
  {
    id: 'suggested3',
    title: 'Terapia Cognitiva Comportamentale Canina',
    description: 'Protocollo avanzato per gestire comportamenti compulsivi identificati',
    reason: 'Pattern comportamentali ripetitivi registrati 12 volte negli ultimi 10 giorni',
    source: 'Diario Comportamentale + Community Insights',
    confidence: 86,
    estimatedSuccess: 79,
    similarCases: 67,
    category: 'Comportamento',
    difficulty: 'Difficile',
    duration: 35,
    urgency: 'medium',
    integrationData: {
      compulsiveBehaviors: ['Leccamento eccessivo', 'Rotazione', 'Scavo'],
      frequency: 'high'
    },
    autoGenerated: true
  }
];

const mockTemplates: ProtocolTemplate[] = [
  {
    id: 'template1',
    name: 'Cucciolo Perfetto - Base',
    description: 'Protocollo completo per educazione cuccioli 2-6 mesi',
    category: 'Educazione',
    difficulty: 'Facile',
    duration: 14,
    exercises: [],
    popularity: 95,
    successRate: 91
  },
  {
    id: 'template2',
    name: 'Anti-Ansia Pro',
    description: 'Protocollo professionale per ansia generalizzata',
    category: 'Comportamento',
    difficulty: 'Medio',
    duration: 21,
    exercises: [],
    popularity: 87,
    successRate: 84
  },
  {
    id: 'template3',
    name: 'Socializzazione Intensiva',
    description: 'Programma completo per cani con problemi sociali',
    category: 'Sociale',
    difficulty: 'Difficile',
    duration: 35,
    exercises: [],
    popularity: 76,
    successRate: 79
  }
];

// Main Component
export const AITrainingComplete: React.FC = () => {
  // State Management
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedProtocol, setSelectedProtocol] = useState<TrainingProtocol | null>(null);
  const [showProtocolCreator, setShowProtocolCreator] = useState(false);
  const [showWizard, setShowWizard] = useState(false);
  const [isOnline, setIsOnline] = useState(true);
  const [notifications, setNotifications] = useState(true);
  const [currentView, setCurrentView] = useState<'protocols' | 'suggestions' | 'analytics' | 'community'>('protocols');

  // Wizard State
  const [wizardStep, setWizardStep] = useState(1);
  const [wizardData, setWizardData] = useState({
    title: '',
    description: '',
    category: '',
    difficulty: 'Facile',
    duration: 14,
    targetBehavior: '',
    triggers: [],
    template: null,
    schedule: {
      startDate: '',
      dailyTime: '09:00',
      reminderTimes: ['08:45'],
      weekdays: [1, 2, 3, 4, 5, 6, 7],
      flexible: true
    },
    materials: [],
    isPublic: false,
    mentorSupport: false
  });

  // Create Protocol State
  const [isCreatingProtocol, setIsCreatingProtocol] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      setIsOnline(navigator.onLine);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  // Filtered protocols
  const filteredProtocols = useMemo(() => {
    return mockProtocols.filter(protocol => {
      const matchesSearch = protocol.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           protocol.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           protocol.petName.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = categoryFilter === 'all' || protocol.category === categoryFilter;
      const matchesStatus = statusFilter === 'all' || protocol.status === statusFilter;
      
      return matchesSearch && matchesCategory && matchesStatus;
    });
  }, [searchTerm, categoryFilter, statusFilter]);

  // Utility Functions
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Facile': return 'bg-green-500/20 text-green-700 border-green-500/20';
      case 'Medio': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/20';
      case 'Difficile': return 'bg-red-500/20 text-red-700 border-red-500/20';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/20';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-blue-500/20 text-blue-700 border-blue-500/20';
      case 'completed': return 'bg-green-500/20 text-green-700 border-green-500/20';
      case 'paused': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/20';
      case 'available': return 'bg-gray-500/20 text-gray-700 border-gray-500/20';
      case 'suggested': return 'bg-purple-500/20 text-purple-700 border-purple-500/20';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/20';
    }
  };

  const getUrgencyColor = (urgency: string) => {
    switch (urgency) {
      case 'critical': return 'bg-red-600/20 text-red-700 border-red-600/20';
      case 'high': return 'bg-orange-500/20 text-orange-700 border-orange-500/20';
      case 'medium': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/20';
      case 'low': return 'bg-green-500/20 text-green-700 border-green-500/20';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/20';
    }
  };

  // Protocol Actions
  const handleStartProtocol = async (protocolId: string) => {
    setIsCreatingProtocol(true);
    // Simulate protocol creation process
    for (let i = 0; i <= 100; i += 10) {
      setUploadProgress(i);
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    // Find protocol and start it
    const protocol = mockProtocols.find(p => p.id === protocolId);
    if (protocol) {
      protocol.status = 'active';
      protocol.currentDay = 1;
      protocol.progress = 0;
    }
    
    setIsCreatingProtocol(false);
    setUploadProgress(0);
    alert(`Protocollo "${protocol?.title}" avviato con successo! Troverai il tracking nella dashboard.`);
  };

  const handleAcceptSuggestion = async (suggestion: SuggestedProtocol) => {
    // Create new protocol from suggestion
    const newProtocol: TrainingProtocol = {
      id: `protocol_${Date.now()}`,
      title: suggestion.title,
      description: suggestion.description,
      category: suggestion.category,
      difficulty: suggestion.difficulty as any,
      duration: suggestion.duration,
      progress: 0,
      status: 'available',
      petId: currentPet.id,
      petName: currentPet.name,
      petAvatar: currentPet.avatar,
      targetBehavior: suggestion.description,
      currentDay: 0,
      totalDays: suggestion.duration,
      successRate: suggestion.estimatedSuccess,
      aiGenerated: suggestion.autoGenerated,
      triggers: [],
      exercises: [],
      metrics: {
        behaviorImprovement: 0,
        stressReduction: 0,
        engagementLevel: 0,
        ownerSatisfaction: 0,
        communitySuccess: suggestion.estimatedSuccess,
        timeEfficiency: 0,
        costEffectiveness: 0
      },
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      communityRating: 0,
      communityUsage: suggestion.similarCases,
      integrationSource: 'analysis',
      veterinaryApproved: false,
      requiredMaterials: [],
      isPublic: false,
      collaborators: [],
      notificationsEnabled: true,
      schedule: {
        startDate: new Date().toISOString().split('T')[0],
        endDate: new Date(Date.now() + suggestion.duration * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        dailyTime: '09:00',
        reminderTimes: ['08:45'],
        weekdays: [1, 2, 3, 4, 5, 6, 7],
        flexible: true
      }
    };

    mockProtocols.push(newProtocol);
    alert(`Protocollo "${suggestion.title}" creato e aggiunto ai tuoi protocolli!`);
  };

  // Wizard Functions
  const handleWizardNext = () => {
    if (wizardStep < 4) {
      setWizardStep(wizardStep + 1);
    } else {
      handleCreateProtocol();
    }
  };

  const handleWizardPrev = () => {
    if (wizardStep > 1) {
      setWizardStep(wizardStep - 1);
    }
  };

  const handleCreateProtocol = async () => {
    setIsCreatingProtocol(true);
    
    // Simulate AI protocol generation
    for (let i = 0; i <= 100; i += 5) {
      setUploadProgress(i);
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    const newProtocol: TrainingProtocol = {
      id: `custom_${Date.now()}`,
      title: wizardData.title,
      description: wizardData.description,
      category: wizardData.category,
      difficulty: wizardData.difficulty as any,
      duration: wizardData.duration,
      progress: 0,
      status: 'available',
      petId: currentPet.id,
      petName: currentPet.name,
      petAvatar: currentPet.avatar,
      targetBehavior: wizardData.targetBehavior,
      currentDay: 0,
      totalDays: wizardData.duration,
      successRate: 85, // Default estimated
      aiGenerated: true,
      triggers: wizardData.triggers,
      exercises: [],
      metrics: {
        behaviorImprovement: 0,
        stressReduction: 0,
        engagementLevel: 0,
        ownerSatisfaction: 0,
        communitySuccess: 85,
        timeEfficiency: 0,
        costEffectiveness: 0
      },
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      communityRating: 0,
      communityUsage: 0,
      integrationSource: 'manual',
      veterinaryApproved: false,
      requiredMaterials: wizardData.materials,
      isPublic: wizardData.isPublic,
      collaborators: wizardData.mentorSupport ? ['AI Assistant'] : [],
      notificationsEnabled: true,
      schedule: wizardData.schedule
    };

    mockProtocols.push(newProtocol);
    
    setIsCreatingProtocol(false);
    setUploadProgress(0);
    setShowWizard(false);
    setWizardStep(1);
    setWizardData({
      title: '',
      description: '',
      category: '',
      difficulty: 'Facile',
      duration: 14,
      targetBehavior: '',
      triggers: [],
      template: null,
      schedule: {
        startDate: '',
        dailyTime: '09:00',
        reminderTimes: ['08:45'],
        weekdays: [1, 2, 3, 4, 5, 6, 7],
        flexible: true
      },
      materials: [],
      isPublic: false,
      mentorSupport: false
    });

    alert(`Protocollo personalizzato "${newProtocol.title}" creato con successo!`);
  };

  return (
    <div className="space-y-6">
      {/* Connection Status */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          {isOnline ? (
            <div className="flex items-center gap-2 text-green-600">
              <Wifi className="h-4 w-4" />
              <span className="text-sm">Online - Sincronizzazione attiva</span>
            </div>
          ) : (
            <div className="flex items-center gap-2 text-orange-600">
              <WifiOff className="h-4 w-4" />
              <span className="text-sm">Offline - Modalità locale</span>
            </div>
          )}
        </div>
        <div className="flex items-center gap-2">
          <Bell className={`h-4 w-4 ${notifications ? 'text-blue-500' : 'text-gray-400'}`} />
          <Switch
            checked={notifications}
            onCheckedChange={setNotifications}
          />
        </div>
      </div>

      {/* AI Integration Status */}
      <Alert className="border-emerald-500/20 bg-emerald-50/50 dark:bg-emerald-950/20">
        <Brain className="h-4 w-4 text-emerald-500" />
        <AlertDescription className="text-emerald-700 dark:text-emerald-300">
          🤖 AI Training attivo per {currentPet.name}! Analizzando dati comportamentali in tempo reale.
          {mockSuggestedProtocols.length > 0 && ` ${mockSuggestedProtocols.length} nuovi protocolli suggeriti.`}
        </AlertDescription>
      </Alert>

      {/* Quick Stats Dashboard */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="border-purple-500/20">
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Target className="h-5 w-5 text-purple-500" />
              <div>
                <div className="text-lg font-bold text-purple-500">
                  {mockProtocols.filter(p => p.status === 'active').length}
                </div>
                <div className="text-xs text-muted-foreground">Protocolli Attivi</div>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card className="border-green-500/20">
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Award className="h-5 w-5 text-green-500" />
              <div>
                <div className="text-lg font-bold text-green-500">
                  {mockProtocols.filter(p => p.status === 'completed').length}
                </div>
                <div className="text-xs text-muted-foreground">Completati</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-blue-500/20">
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-blue-500" />
              <div>
                <div className="text-lg font-bold text-blue-500">
                  {Math.round(mockProtocols.reduce((acc, p) => acc + p.successRate, 0) / mockProtocols.length)}%
                </div>
                <div className="text-xs text-muted-foreground">Successo Medio</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-orange-500/20">
          <CardContent className="p-4">
            <div className="flex items-center gap-2">
              <Lightbulb className="h-5 w-5 text-orange-500" />
              <div>
                <div className="text-lg font-bold text-orange-500">
                  {mockSuggestedProtocols.filter(s => s.urgency === 'high' || s.urgency === 'critical').length}
                </div>
                <div className="text-xs text-muted-foreground">Suggerimenti AI</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Cerca protocolli, comportamenti, categorie..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <Select value={categoryFilter} onValueChange={setCategoryFilter}>
          <SelectTrigger className="w-full sm:w-48">
            <SelectValue placeholder="Categoria" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Tutte le categorie</SelectItem>
            <SelectItem value="Comportamento">Comportamento</SelectItem>
            <SelectItem value="Sociale">Sociale</SelectItem>
            <SelectItem value="Fisico">Fisico</SelectItem>
            <SelectItem value="Alimentazione">Alimentazione</SelectItem>
            <SelectItem value="Benessere">Benessere</SelectItem>
            <SelectItem value="Educazione">Educazione</SelectItem>
          </SelectContent>
        </Select>
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-full sm:w-48">
            <SelectValue placeholder="Status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">Tutti gli status</SelectItem>
            <SelectItem value="active">Attivi</SelectItem>
            <SelectItem value="completed">Completati</SelectItem>
            <SelectItem value="paused">In pausa</SelectItem>
            <SelectItem value="available">Disponibili</SelectItem>
            <SelectItem value="suggested">Suggeriti</SelectItem>
          </SelectContent>
        </Select>
        <Button 
          onClick={() => setShowWizard(true)}
          className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
        >
          <Plus className="h-4 w-4 mr-2" />
          Crea Protocollo
        </Button>
      </div>

      <Tabs value={currentView} onValueChange={(value: any) => setCurrentView(value)} className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="protocols" className="flex items-center gap-2">
            <Target className="h-4 w-4" />
            Protocolli
            <Badge variant="secondary" className="ml-1">
              {filteredProtocols.length}
            </Badge>
          </TabsTrigger>
          <TabsTrigger value="suggestions" className="flex items-center gap-2">
            <Lightbulb className="h-4 w-4" />
            AI Suggestions
            <Badge variant="secondary" className="ml-1">
              {mockSuggestedProtocols.length}
            </Badge>
          </TabsTrigger>
          <TabsTrigger value="analytics" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            Analytics
          </TabsTrigger>
          <TabsTrigger value="community" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            Community
          </TabsTrigger>
        </TabsList>

        {/* Protocols Tab */}
        <TabsContent value="protocols" className="space-y-4">
          {filteredProtocols.length === 0 ? (
            <div className="text-center py-12">
              <Target className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">Nessun protocollo trovato</h3>
              <p className="text-muted-foreground mb-4">
                Crea il tuo primo protocollo personalizzato o esplora i suggerimenti AI
              </p>
              <div className="flex gap-2 justify-center">
                <Button onClick={() => setShowWizard(true)} className="bg-purple-500 hover:bg-purple-600">
                  <Plus className="h-4 w-4 mr-2" />
                  Crea Protocollo
                </Button>
                <Button variant="outline" onClick={() => setCurrentView('suggestions')}>
                  <Lightbulb className="h-4 w-4 mr-2" />
                  Vedi Suggerimenti
                </Button>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
              {filteredProtocols.map((protocol) => (
                <Card key={protocol.id} className="hover:shadow-lg transition-all duration-300 border-l-4 border-l-purple-500">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <Avatar className="h-10 w-10 border-2 border-purple-500/30">
                          <AvatarImage src={protocol.petAvatar} alt={protocol.petName} />
                          <AvatarFallback className="bg-purple-500/20 text-purple-700">
                            {protocol.petName.substring(0, 2)}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <h3 className="font-semibold text-sm">{protocol.title}</h3>
                          <p className="text-xs text-muted-foreground">{protocol.petName}</p>
                        </div>
                      </div>
                      <div className="flex flex-col items-end gap-1">
                        <Badge className={getStatusColor(protocol.status)}>
                          <span className="capitalize">{protocol.status === 'active' ? 'Attivo' : 
                                                        protocol.status === 'completed' ? 'Completato' :
                                                        protocol.status === 'paused' ? 'In Pausa' : 
                                                        protocol.status === 'available' ? 'Disponibile' : 'Suggerito'}</span>
                        </Badge>
                        {protocol.aiGenerated && (
                          <Badge variant="outline" className="text-xs">
                            <Brain className="h-3 w-3 mr-1" />
                            AI
                          </Badge>
                        )}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <p className="text-sm text-muted-foreground line-clamp-2">
                      {protocol.description}
                    </p>
                    
                    {protocol.status === 'active' && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>Progresso</span>
                          <span className="font-medium">{protocol.progress}%</span>
                        </div>
                        <Progress value={protocol.progress} className="h-2" />
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>Giorno {protocol.currentDay}/{protocol.totalDays}</span>
                          <span>Successo: {protocol.successRate}%</span>
                        </div>
                      </div>
                    )}

                    <div className="flex flex-wrap gap-1">
                      <Badge className={getDifficultyColor(protocol.difficulty)}>
                        {protocol.difficulty}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {protocol.category}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        <Timer className="h-3 w-3 mr-1" />
                        {protocol.duration}g
                      </Badge>
                      {protocol.estimatedCost && (
                        <Badge variant="outline" className="text-xs">
                          €{protocol.estimatedCost}
                        </Badge>
                      )}
                    </div>

                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <Star className="h-3 w-3 text-yellow-500" />
                        <span>{protocol.communityRating}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Users className="h-3 w-3" />
                        <span>{protocol.communityUsage}</span>
                      </div>
                      {protocol.mentorRecommended && (
                        <div className="flex items-center gap-1">
                          <Shield className="h-3 w-3 text-green-500" />
                          <span>Mentore</span>
                        </div>
                      )}
                      {protocol.veterinaryApproved && (
                        <div className="flex items-center gap-1">
                          <UserCheck className="h-3 w-3 text-blue-500" />
                          <span>Vet</span>
                        </div>
                      )}
                    </div>

                    <Separator />

                    <div className="flex gap-2">
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button size="sm" variant="outline" className="flex-1">
                            <Eye className="h-4 w-4 mr-1" />
                            Dettagli
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
                          <DialogHeader>
                            <DialogTitle className="flex items-center gap-3">
                              <Avatar className="h-10 w-10">
                                <AvatarImage src={protocol.petAvatar} alt={protocol.petName} />
                                <AvatarFallback>{protocol.petName.substring(0, 2)}</AvatarFallback>
                              </Avatar>
                              <div>
                                <h2 className="text-xl font-bold">{protocol.title}</h2>
                                <p className="text-sm text-muted-foreground">
                                  {protocol.petName} • {protocol.category} • {protocol.totalDays} giorni
                                </p>
                              </div>
                              <Badge className={getStatusColor(protocol.status)} className="ml-auto">
                                {protocol.status}
                              </Badge>
                            </DialogTitle>
                          </DialogHeader>
                          
                          <div className="space-y-6">
                            {/* Progress Overview */}
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                              <div className="text-center p-3 bg-muted/50 rounded-lg">
                                <div className="text-2xl font-bold text-purple-600">{protocol.progress}%</div>
                                <div className="text-sm text-muted-foreground">Completato</div>
                              </div>
                              <div className="text-center p-3 bg-muted/50 rounded-lg">
                                <div className="text-2xl font-bold text-green-600">{protocol.successRate}%</div>
                                <div className="text-sm text-muted-foreground">Successo</div>
                              </div>
                              <div className="text-center p-3 bg-muted/50 rounded-lg">
                                <div className="text-2xl font-bold text-blue-600">{protocol.currentDay}</div>
                                <div className="text-sm text-muted-foreground">Giorno Attuale</div>
                              </div>
                              <div className="text-center p-3 bg-muted/50 rounded-lg">
                                <div className="text-2xl font-bold text-orange-600">{protocol.communityRating}</div>
                                <div className="text-sm text-muted-foreground">Rating</div>
                              </div>
                            </div>

                            {/* Enhanced Metrics */}
                            <div>
                              <h3 className="font-semibold mb-3">Metriche Avanzate</h3>
                              <div className="grid grid-cols-2 gap-4">
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Miglioramento Comportamentale</span>
                                    <span>{protocol.metrics.behaviorImprovement}%</span>
                                  </div>
                                  <Progress value={protocol.metrics.behaviorImprovement} className="h-2" />
                                </div>
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Riduzione Stress</span>
                                    <span>{protocol.metrics.stressReduction}%</span>
                                  </div>
                                  <Progress value={protocol.metrics.stressReduction} className="h-2" />
                                </div>
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Coinvolgimento</span>
                                    <span>{protocol.metrics.engagementLevel}%</span>
                                  </div>
                                  <Progress value={protocol.metrics.engagementLevel} className="h-2" />
                                </div>
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Soddisfazione</span>
                                    <span>{protocol.metrics.ownerSatisfaction}%</span>
                                  </div>
                                  <Progress value={protocol.metrics.ownerSatisfaction} className="h-2" />
                                </div>
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Successo Community</span>
                                    <span>{protocol.metrics.communitySuccess}%</span>
                                  </div>
                                  <Progress value={protocol.metrics.communitySuccess} className="h-2" />
                                </div>
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Efficienza Temporale</span>
                                    <span>{protocol.metrics.timeEfficiency}%</span>
                                  </div>
                                  <Progress value={protocol.metrics.timeEfficiency} className="h-2" />
                                </div>
                              </div>
                            </div>

                            {/* Integration Source & Triggers */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                              <div>
                                <h3 className="font-semibold mb-3">Trigger Identificati</h3>
                                <div className="flex flex-wrap gap-2">
                                  {protocol.triggers.map((trigger, idx) => (
                                    <Badge key={idx} variant="outline" className="text-xs">
                                      <AlertCircle className="h-3 w-3 mr-1" />
                                      {trigger}
                                    </Badge>
                                  ))}
                                </div>
                              </div>
                              
                              <div>
                                <h3 className="font-semibold mb-3">Fonte Integrazione</h3>
                                <div className="flex items-center gap-2 text-sm">
                                  <Zap className="h-4 w-4 text-blue-500" />
                                  <Badge variant="outline">
                                    {protocol.integrationSource === 'analysis' && 'Analisi Emotiva'}
                                    {protocol.integrationSource === 'diary' && 'Diario Comportamentale'}
                                    {protocol.integrationSource === 'wellness' && 'Monitoraggio Benessere'}
                                    {protocol.integrationSource === 'matching' && 'Pet Matching'}
                                    {protocol.integrationSource === 'manual' && 'Creazione Manuale'}
                                  </Badge>
                                </div>
                              </div>
                            </div>

                            {/* Materials & Schedule */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                              <div>
                                <h3 className="font-semibold mb-3">Materiali Necessari</h3>
                                <div className="space-y-2">
                                  {protocol.requiredMaterials.map((material, idx) => (
                                    <div key={idx} className="flex items-center gap-2 text-sm">
                                      <Check className="h-4 w-4 text-green-500" />
                                      <span>{material}</span>
                                    </div>
                                  ))}
                                  {protocol.estimatedCost && (
                                    <div className="pt-2 border-t text-sm font-medium">
                                      Costo stimato: €{protocol.estimatedCost}
                                    </div>
                                  )}
                                </div>
                              </div>

                              <div>
                                <h3 className="font-semibold mb-3">Programma</h3>
                                <div className="space-y-2 text-sm">
                                  <div className="flex justify-between">
                                    <span>Orario quotidiano:</span>
                                    <span>{protocol.schedule.dailyTime}</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span>Promemoria:</span>
                                    <span>{protocol.schedule.reminderTimes.join(', ')}</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span>Flessibile:</span>
                                    <span>{protocol.schedule.flexible ? 'Sì' : 'No'}</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span>Notifiche:</span>
                                    <span>{protocol.notificationsEnabled ? 'Attive' : 'Disattive'}</span>
                                  </div>
                                </div>
                              </div>
                            </div>

                            {/* Actions */}
                            <div className="flex gap-3 pt-4 border-t">
                              {protocol.status === 'available' && (
                                <Button 
                                  className="flex-1 bg-green-500 hover:bg-green-600"
                                  onClick={() => handleStartProtocol(protocol.id)}
                                  disabled={isCreatingProtocol}
                                >
                                  {isCreatingProtocol ? (
                                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                                  ) : (
                                    <Rocket className="h-4 w-4 mr-2" />
                                  )}
                                  Avvia Protocollo
                                </Button>
                              )}
                              
                              {protocol.status === 'active' && (
                                <Button className="flex-1 bg-blue-500 hover:bg-blue-600">
                                  <Activity className="h-4 w-4 mr-2" />
                                  Vai al Training
                                </Button>
                              )}

                              <Button variant="outline">
                                <Share className="h-4 w-4 mr-2" />
                                Condividi
                              </Button>
                              
                              <Button variant="outline">
                                <Download className="h-4 w-4 mr-2" />
                                Esporta
                              </Button>

                              {protocol.isPublic && protocol.shareCode && (
                                <Button variant="outline">
                                  <Copy className="h-4 w-4 mr-2" />
                                  {protocol.shareCode}
                                </Button>
                              )}
                            </div>
                          </div>
                        </DialogContent>
                      </Dialog>
                      
                      {protocol.status === 'active' && (
                        <Button size="sm" className="bg-blue-500 hover:bg-blue-600">
                          <Activity className="h-4 w-4 mr-1" />
                          Continua
                        </Button>
                      )}
                      
                      {protocol.status === 'available' && (
                        <Button 
                          size="sm" 
                          onClick={() => handleStartProtocol(protocol.id)}
                          disabled={isCreatingProtocol}
                          className="bg-green-500 hover:bg-green-600"
                        >
                          {isCreatingProtocol ? (
                            <Loader2 className="h-4 w-4 mr-1 animate-spin" />
                          ) : (
                            <Rocket className="h-4 w-4 mr-1" />
                          )}
                          Avvia
                        </Button>
                      )}

                      {protocol.status === 'completed' && (
                        <Button size="sm" variant="outline" className="text-green-600">
                          <CheckCircle className="h-4 w-4 mr-1" />
                          Completato
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {/* Loading State during Protocol Creation */}
          {isCreatingProtocol && (
            <Card className="border-2 border-dashed border-purple-500">
              <CardContent className="p-6 text-center">
                <Loader2 className="h-8 w-8 animate-spin text-purple-500 mx-auto mb-4" />
                <h3 className="font-semibold mb-2">Creando Protocollo AI</h3>
                <p className="text-sm text-muted-foreground mb-4">
                  L'AI sta generando esercizi personalizzati per {currentPet.name}...
                </p>
                <Progress value={uploadProgress} className="max-w-xs mx-auto" />
                <div className="text-xs text-muted-foreground mt-2">{uploadProgress}%</div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* AI Suggestions Tab */}
        <TabsContent value="suggestions" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
            {mockSuggestedProtocols.map((suggestion) => (
              <Card key={suggestion.id} className="hover:shadow-lg transition-all duration-300 border-l-4 border-l-blue-500">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Brain className="h-5 w-5 text-blue-500" />
                      <h3 className="font-semibold">{suggestion.title}</h3>
                    </div>
                    <div className="flex flex-col items-end gap-1">
                      <Badge className="bg-blue-500/20 text-blue-700">
                        {suggestion.confidence}% AI
                      </Badge>
                      <Badge className={getUrgencyColor(suggestion.urgency)}>
                        {suggestion.urgency === 'critical' && '🚨 Critico'}
                        {suggestion.urgency === 'high' && '🔥 Alta'}
                        {suggestion.urgency === 'medium' && '⚡ Media'}
                        {suggestion.urgency === 'low' && '📝 Bassa'}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-muted-foreground">
                    {suggestion.description}
                  </p>
                  
                  <div className="p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg">
                    <p className="text-sm text-blue-700 dark:text-blue-300">
                      <strong>Perché consigliato:</strong> {suggestion.reason}
                    </p>
                  </div>

                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <Sparkles className="h-4 w-4 text-blue-500" />
                    <span>{suggestion.source}</span>
                    {suggestion.autoGenerated && (
                      <Badge variant="outline" className="text-xs">Auto-AI</Badge>
                    )}
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-muted-foreground">Successo stimato:</span>
                      <div className="font-semibold text-green-600">{suggestion.estimatedSuccess}%</div>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Casi simili:</span>
                      <div className="font-semibold">{suggestion.similarCases}</div>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-1">
                    <Badge className={getDifficultyColor(suggestion.difficulty)}>
                      {suggestion.difficulty}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      {suggestion.category}
                    </Badge>
                    <Badge variant="outline" className="text-xs">
                      <Timer className="h-3 w-3 mr-1" />
                      {suggestion.duration}g
                    </Badge>
                  </div>

                  {/* Integration Data Preview */}
                  {suggestion.integrationData && (
                    <div className="p-2 bg-muted/50 rounded text-xs">
                      <div className="font-medium mb-1">Dati di Integrazione:</div>
                      {suggestion.integrationData.triggerAnalysis && (
                        <div>Trigger: {suggestion.integrationData.triggerAnalysis.slice(0, 2).join(', ')}</div>
                      )}
                      {suggestion.integrationData.healthMetrics && (
                        <div>Salute: Peso {suggestion.integrationData.healthMetrics.weight}</div>
                      )}
                    </div>
                  )}

                  <Separator />

                  <div className="flex gap-2">
                    <Button 
                      size="sm" 
                      variant="outline" 
                      className="flex-1"
                    >
                      <Eye className="h-4 w-4 mr-1" />
                      Anteprima AI
                    </Button>
                    <Button 
                      size="sm" 
                      onClick={() => handleAcceptSuggestion(suggestion)}
                      className="bg-blue-500 hover:bg-blue-600"
                    >
                      <Plus className="h-4 w-4 mr-1" />
                      Accetta
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {mockSuggestedProtocols.length === 0 && (
            <div className="text-center py-12">
              <Lightbulb className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">Nessun suggerimento disponibile</h3>
              <p className="text-muted-foreground mb-4">
                L'AI sta analizzando i dati comportamentali di {currentPet.name}...
              </p>
              <Button variant="outline">
                <RotateCcw className="h-4 w-4 mr-2" />
                Aggiorna Analisi
              </Button>
            </div>
          )}
        </TabsContent>

        {/* Analytics Tab */}
        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-sm font-medium">Efficacia Media Protocolli</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">87%</div>
                <p className="text-sm text-muted-foreground">+5% rispetto al mese scorso</p>
                <Progress value={87} className="mt-2" />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-sm font-medium">Tempo Medio Completamento</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">18.5</div>
                <p className="text-sm text-muted-foreground">giorni per protocollo</p>
                <div className="text-xs text-green-600 mt-1">-2.3 giorni vs media settore</div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-sm font-medium">ROI Investimento</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">340%</div>
                <p className="text-sm text-muted-foreground">benefici vs costi</p>
                <div className="text-xs text-green-600 mt-1">Risparmio visite vet: €890</div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-sm font-medium">Engagement Rate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-orange-600">94%</div>
                <p className="text-sm text-muted-foreground">completamento esercizi</p>
                <Progress value={94} className="mt-2" />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-sm font-medium">Soddisfazione Utenti</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-yellow-600">4.7</div>
                <p className="text-sm text-muted-foreground">rating medio su 5</p>
                <div className="flex items-center gap-1 mt-1">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <Star key={star} className={`h-3 w-3 ${star <= 4.7 ? 'text-yellow-500 fill-current' : 'text-gray-300'}`} />
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-sm font-medium">Community Impact</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-emerald-600">2.4k</div>
                <p className="text-sm text-muted-foreground">protocolli condivisi</p>
                <div className="text-xs text-green-600 mt-1">+156 questa settimana</div>
              </CardContent>
            </Card>
          </div>

          {/* Advanced Analytics Charts Placeholder */}
          <Card>
            <CardHeader>
              <CardTitle>Trend Performance nel Tempo</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64 flex items-center justify-center bg-muted/50 rounded-lg">
                <div className="text-center">
                  <BarChart3 className="h-12 w-12 text-muted-foreground mx-auto mb-2" />
                  <p className="text-muted-foreground">Grafici analitici avanzati</p>
                  <p className="text-sm text-muted-foreground">Feature in sviluppo</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Community Tab */}
        <TabsContent value="community" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Trophy className="h-5 w-5 text-yellow-500" />
                  Protocolli Più Popolari
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {mockTemplates.map((template, idx) => (
                    <div key={template.id} className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded-full bg-yellow-500 text-white flex items-center justify-center text-sm font-bold">
                          {idx + 1}
                        </div>
                        <div>
                          <div className="font-medium text-sm">{template.name}</div>
                          <div className="text-xs text-muted-foreground">{template.category} • {template.duration} giorni</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-medium">{template.popularity}%</div>
                        <div className="text-xs text-muted-foreground">successo</div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5 text-blue-500" />
                  Community Globale
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">15.7k</div>
                    <div className="text-sm text-muted-foreground">Proprietari attivi</div>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Protocolli condivisi oggi:</span>
                      <span className="font-medium">47</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Success stories:</span>
                      <span className="font-medium">1,234</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span>Mentori attivi:</span>
                      <span className="font-medium">89</span>
                    </div>
                  </div>

                  <Separator />

                  <div className="space-y-2">
                    <h4 className="font-medium text-sm">Paesi più attivi:</h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span>🇮🇹 Italia</span>
                        <span>3.2k</span>
                      </div>
                      <div className="flex justify-between">
                        <span>🇺🇸 USA</span>
                        <span>2.8k</span>
                      </div>
                      <div className="flex justify-between">
                        <span>🇩🇪 Germania</span>
                        <span>2.1k</span>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Protocol Creation Wizard */}
      {showWizard && (
        <Dialog open={showWizard} onOpenChange={setShowWizard}>
          <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-3">
                <Brain className="h-6 w-6 text-purple-500" />
                Creazione Protocollo AI
                <Badge variant="outline">Step {wizardStep}/4</Badge>
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-6">
              {/* Progress Indicator */}
              <div className="flex items-center gap-2">
                {[1, 2, 3, 4].map((step) => (
                  <div key={step} className="flex items-center">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                      step <= wizardStep ? 'bg-purple-500 text-white' : 'bg-muted text-muted-foreground'
                    }`}>
                      {step}
                    </div>
                    {step < 4 && <div className={`w-12 h-1 ${step < wizardStep ? 'bg-purple-500' : 'bg-muted'}`} />}
                  </div>
                ))}
              </div>

              {/* Step Content */}
              {wizardStep === 1 && (
                <div className="space-y-4">
                  <h3 className="font-semibold">Informazioni Base</h3>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="title">Titolo del Protocollo</Label>
                      <Input
                        id="title"
                        value={wizardData.title}
                        onChange={(e) => setWizardData({...wizardData, title: e.target.value})}
                        placeholder="es. Gestione Ansia da Separazione"
                      />
                    </div>
                    <div>
                      <Label htmlFor="description">Descrizione</Label>
                      <Textarea
                        id="description"
                        value={wizardData.description}
                        onChange={(e) => setWizardData({...wizardData, description: e.target.value})}
                        placeholder="Descrivi l'obiettivo del protocollo..."
                        rows={3}
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label>Categoria</Label>
                        <Select value={wizardData.category} onValueChange={(value) => setWizardData({...wizardData, category: value})}>
                          <SelectTrigger>
                            <SelectValue placeholder="Seleziona categoria" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Comportamento">Comportamento</SelectItem>
                            <SelectItem value="Sociale">Sociale</SelectItem>
                            <SelectItem value="Fisico">Fisico</SelectItem>
                            <SelectItem value="Alimentazione">Alimentazione</SelectItem>
                            <SelectItem value="Benessere">Benessere</SelectItem>
                            <SelectItem value="Educazione">Educazione</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label>Difficoltà</Label>
                        <Select value={wizardData.difficulty} onValueChange={(value) => setWizardData({...wizardData, difficulty: value})}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Facile">Facile</SelectItem>
                            <SelectItem value="Medio">Medio</SelectItem>
                            <SelectItem value="Difficile">Difficile</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {wizardStep === 2 && (
                <div className="space-y-4">
                  <h3 className="font-semibold">Configurazione Avanzata</h3>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="targetBehavior">Comportamento Target</Label>
                      <Input
                        id="targetBehavior"
                        value={wizardData.targetBehavior}
                        onChange={(e) => setWizardData({...wizardData, targetBehavior: e.target.value})}
                        placeholder="es. Ridurre l'ansia da separazione"
                      />
                    </div>
                    <div>
                      <Label>Durata (giorni): {wizardData.duration}</Label>
                      <Slider
                        value={[wizardData.duration]}
                        onValueChange={(value) => setWizardData({...wizardData, duration: value[0]})}
                        max={60}
                        min={7}
                        step={1}
                        className="mt-2"
                      />
                      <div className="text-xs text-muted-foreground mt-1">
                        Consigliato: 14-21 giorni per risultati ottimali
                      </div>
                    </div>
                    <div>
                      <Label>Template di Partenza (Opzionale)</Label>
                      <Select onValueChange={(value) => setWizardData({...wizardData, template: value})}>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleziona un template" />
                        </SelectTrigger>
                        <SelectContent>
                          {mockTemplates.map((template) => (
                            <SelectItem key={template.id} value={template.id}>
                              {template.name} - {template.successRate}% successo
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </div>
              )}

              {wizardStep === 3 && (
                <div className="space-y-4">
                  <h3 className="font-semibold">Programmazione e Notifiche</h3>
                  <div className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="startDate">Data Inizio</Label>
                        <Input
                          id="startDate"
                          type="date"
                          value={wizardData.schedule.startDate}
                          onChange={(e) => setWizardData({
                            ...wizardData, 
                            schedule: {...wizardData.schedule, startDate: e.target.value}
                          })}
                        />
                      </div>
                      <div>
                        <Label htmlFor="dailyTime">Orario Quotidiano</Label>
                        <Input
                          id="dailyTime"
                          type="time"
                          value={wizardData.schedule.dailyTime}
                          onChange={(e) => setWizardData({
                            ...wizardData, 
                            schedule: {...wizardData.schedule, dailyTime: e.target.value}
                          })}
                        />
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Switch
                        id="flexible"
                        checked={wizardData.schedule.flexible}
                        onCheckedChange={(checked) => setWizardData({
                          ...wizardData, 
                          schedule: {...wizardData.schedule, flexible: checked}
                        })}
                      />
                      <Label htmlFor="flexible">Orario flessibile (±2 ore)</Label>
                    </div>

                    <div>
                      <Label>Giorni della Settimana</Label>
                      <div className="flex gap-2 mt-2">
                        {['Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab', 'Dom'].map((day, idx) => (
                          <Button
                            key={day}
                            variant={wizardData.schedule.weekdays.includes(idx + 1) ? "default" : "outline"}
                            size="sm"
                            onClick={() => {
                              const weekdays = wizardData.schedule.weekdays.includes(idx + 1)
                                ? wizardData.schedule.weekdays.filter(d => d !== idx + 1)
                                : [...wizardData.schedule.weekdays, idx + 1];
                              setWizardData({
                                ...wizardData,
                                schedule: {...wizardData.schedule, weekdays}
                              });
                            }}
                          >
                            {day}
                          </Button>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {wizardStep === 4 && (
                <div className="space-y-4">
                  <h3 className="font-semibold">Opzioni Finali</h3>
                  <div className="space-y-4">
                    <div>
                      <Label>Materiali Necessari (separati da virgola)</Label>
                      <Textarea
                        value={wizardData.materials.join(', ')}
                        onChange={(e) => setWizardData({...wizardData, materials: e.target.value.split(', ').filter(m => m.trim())})}
                        placeholder="es. Kong riempibile, Snack high-value, Clicker"
                        rows={2}
                      />
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Switch
                        id="isPublic"
                        checked={wizardData.isPublic}
                        onCheckedChange={(checked) => setWizardData({...wizardData, isPublic: checked})}
                      />
                      <Label htmlFor="isPublic">Condividi con la community</Label>
                    </div>

                    <div className="flex items-center space-x-2">
                      <Switch
                        id="mentorSupport"
                        checked={wizardData.mentorSupport}
                        onCheckedChange={(checked) => setWizardData({...wizardData, mentorSupport: checked})}
                      />
                      <Label htmlFor="mentorSupport">Richiedi supporto AI Mentore</Label>
                    </div>

                    <div className="p-4 bg-muted/50 rounded-lg">
                      <h4 className="font-medium mb-2">Riepilogo Protocollo</h4>
                      <div className="text-sm space-y-1">
                        <div><strong>Titolo:</strong> {wizardData.title}</div>
                        <div><strong>Categoria:</strong> {wizardData.category}</div>
                        <div><strong>Durata:</strong> {wizardData.duration} giorni</div>
                        <div><strong>Difficoltà:</strong> {wizardData.difficulty}</div>
                        <div><strong>Pet:</strong> {currentPet.name}</div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Navigation */}
              <div className="flex justify-between pt-4 border-t">
                <Button 
                  variant="outline" 
                  onClick={handleWizardPrev}
                  disabled={wizardStep === 1}
                >
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Indietro
                </Button>
                
                <Button 
                  onClick={handleWizardNext}
                  disabled={!wizardData.title || !wizardData.category}
                  className="bg-purple-500 hover:bg-purple-600"
                >
                  {wizardStep === 4 ? (
                    <>
                      <Save className="h-4 w-4 mr-2" />
                      Crea Protocollo
                    </>
                  ) : (
                    <>
                      Avanti
                      <ArrowRight className="h-4 w-4 ml-2" />
                    </>
                  )}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
};