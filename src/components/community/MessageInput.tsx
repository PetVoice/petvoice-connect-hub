import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Send, Image, Mic, MicOff, Camera, Smile, X } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useUnifiedToast } from '@/hooks/use-unified-toast';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Message } from './Chat';

interface MessageInputProps {
  onSendMessage: (content: string, messageType?: string, fileUrl?: string, voiceDuration?: number) => void;
  replyToMessage?: Message | null;
  onCancelReply?: () => void;
  userNames: Record<string, string>;
  focusInput?: boolean;
}

export const MessageInput: React.FC<MessageInputProps> = ({ 
  onSendMessage, 
  replyToMessage, 
  onCancelReply,
  userNames,
  focusInput = false
}) => {
  const [message, setMessage] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [showEmojis, setShowEmojis] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const recordingStartTime = useRef<number>(0);
  const inputRef = useRef<HTMLInputElement>(null);
  const { showToast } = useUnifiedToast();

  // Focus automatico quando replyToMessage cambia
  React.useEffect(() => {
    if (replyToMessage && inputRef.current) {
      console.log('üéØ Reply set in MessageInput, focusing input');
      setTimeout(() => {
        inputRef.current?.focus();
      }, 100);
    }
  }, [replyToMessage]);

  const emojis = ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö', 'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©', 'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£', 'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨', 'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó', 'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üò¨', 'üôÑ', 'üòØ', 'üò¶', 'üòß', 'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢', 'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üòà', 'üëø', 'üëπ', 'üë∫', 'ü§°', 'üí©', 'üëª', 'üíÄ', '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø', 'üòæ', '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è', '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê', '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥', 'üà∂', 'üàö', 'üà∏', 'üà∫', 'üà∑Ô∏è', '‚ú¥Ô∏è', 'üÜö', 'üíÆ', 'üâê', '„äôÔ∏è', '„äóÔ∏è', 'üà¥', 'üàµ', 'üàπ', 'üà≤', 'üÖ∞Ô∏è', 'üÖ±Ô∏è', 'üÜé', 'üÜë', 'üÖæÔ∏è', 'üÜò', '‚ùå', '‚≠ï', 'üõë', '‚õî', 'üìõ', 'üö´', 'üíØ', 'üí¢', '‚ô®Ô∏è', 'üö∑', 'üöØ', 'üö≥', 'üö±', 'üîû', 'üìµ', 'üö≠', '‚ùó', '‚ùï', '‚ùì', '‚ùî', '‚ÄºÔ∏è', '‚ÅâÔ∏è', 'üîÖ', 'üîÜ', '„ÄΩÔ∏è', '‚ö†Ô∏è', 'üö∏', 'üî±', '‚öúÔ∏è', 'üî∞', '‚ôªÔ∏è', '‚úÖ', 'üàØ', 'üíπ', '‚ùáÔ∏è', '‚ú≥Ô∏è', '‚ùé', 'üåê', 'üí†', '‚ìÇÔ∏è', 'üåÄ', 'üí§', 'üèß', 'üöæ', '‚ôø', 'üÖøÔ∏è', 'üà≥', 'üàÇÔ∏è', 'üõÇ', 'üõÉ', 'üõÑ', 'üõÖ', 'üöπ', 'üö∫', 'üöº', 'üöª', 'üöÆ', 'üé¶', 'üì∂', 'üàÅ', 'üî£', '‚ÑπÔ∏è', 'üî§', 'üî°', 'üî†', 'üÜñ', 'üÜó', 'üÜô', 'üÜí', 'üÜï', 'üÜì', '0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü', 'üî¢', '#Ô∏è‚É£', '*Ô∏è‚É£', '‚èèÔ∏è', '‚ñ∂Ô∏è', '‚è∏Ô∏è', '‚èØÔ∏è', '‚èπÔ∏è', '‚è∫Ô∏è', '‚è≠Ô∏è', '‚èÆÔ∏è', '‚è©', '‚è™', '‚è´', '‚è¨', '‚óÄÔ∏è', 'üîº', 'üîΩ', '‚û°Ô∏è', '‚¨ÖÔ∏è', '‚¨ÜÔ∏è', '‚¨áÔ∏è', '‚ÜóÔ∏è', '‚ÜòÔ∏è', '‚ÜôÔ∏è', '‚ÜñÔ∏è', '‚ÜïÔ∏è', '‚ÜîÔ∏è', '‚Ü™Ô∏è', '‚Ü©Ô∏è', '‚§¥Ô∏è', '‚§µÔ∏è', 'üîÄ', 'üîÅ', 'üîÇ', 'üîÑ', 'üîÉ', 'üéµ', 'üé∂', '‚ûï', '‚ûñ', '‚ûó', '‚úñÔ∏è', '‚ôæÔ∏è', 'üí≤', 'üí±', '‚Ñ¢Ô∏è', '¬©Ô∏è', '¬ÆÔ∏è', '„Ä∞Ô∏è', '‚û∞', '‚ûø', 'üîö', 'üîô', 'üîõ', 'üîù', 'üîú', '‚úîÔ∏è', '‚òëÔ∏è', 'üîò', 'üî¥', 'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', '‚ö´', '‚ö™', 'üü§', 'üî∫', 'üîª', 'üî∏', 'üîπ', 'üî∂', 'üî∑', 'üî≥', 'üî≤', '‚ñ™Ô∏è', '‚ñ´Ô∏è', '‚óæ', '‚óΩ', '‚óºÔ∏è', '‚óªÔ∏è', 'üü•', 'üüß', 'üü®', 'üü©', 'üü¶', 'üü™', '‚¨õ', '‚¨ú', 'üü´', 'üîà', 'üîá', 'üîâ', 'üîä', 'üì¢', 'üì£', 'üìØ', 'üîî', 'üîï', 'üéº', 'üéµ', 'üé∂', 'üéôÔ∏è', 'üéöÔ∏è', 'üéõÔ∏è', 'üé§', 'üéß', 'üìª', 'üé∑', 'ü™ó', 'üé∏', 'üéπ', 'üé∫', 'üéª', 'ü™ï', 'ü•Å', 'ü™ò', 'üî•', 'üí•', '‚ö°', 'üåü', '‚≠ê', 'üå†', '‚òÑÔ∏è', '‚òÄÔ∏è', 'üåû', 'üåù', 'üåõ', 'üåú', 'üåö', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåô', 'üåé', 'üåç', 'üåè', 'ü™ê', 'üí´', '‚≠ê', 'üåü', '‚ú®', 'üåà', '‚òÅÔ∏è', '‚õÖ', '‚õàÔ∏è', 'üå§Ô∏è', 'üå¶Ô∏è', 'üåßÔ∏è', '‚õÜ', '‚ùÑÔ∏è', '‚òÉÔ∏è', '‚õÑ', 'üå®Ô∏è', 'üí®', 'üå™Ô∏è', 'üå´Ô∏è', 'üåä', 'üíß', 'üí¶', 'ü´ß', 'üëç', 'üëé', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è', 'üëç', 'üëé', 'üëä', '‚úä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'üíã', 'ü©∏', 'üë∂', 'üßí', 'üë¶', 'üëß', 'üßë', 'üë±', 'üë®', 'üßî', 'üë©', 'üßì', 'üë¥', 'üëµ', 'üôç', 'üôé', 'üôÖ', 'üôÜ', 'üíÅ', 'üôã', 'üßè', 'üôá', 'ü§¶', 'ü§∑', 'üëÆ', 'üïµÔ∏è', 'üíÇ', 'ü•∑', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï', 'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'ü¶∏', 'ü¶π', 'üßô', 'üßö', 'üßõ', 'üßú', 'üßù', 'üßû', 'üßü', 'üíÜ', 'üíá', 'üö∂', 'üßç', 'üßé', 'üë®‚Äçü¶Ω', 'üë©‚Äçü¶Ω', 'üë®‚Äçü¶º', 'üë©‚Äçü¶º', 'üèÉ', 'üíÉ', 'üï∫', 'üï¥Ô∏è', 'üëØ', 'üßñ', 'üßó', 'ü§∫', 'üèá', '‚õ∑Ô∏è', 'üèÇ', 'üèåÔ∏è', 'üèÑ', 'üö£', 'üèä', '‚õπÔ∏è', 'üèãÔ∏è', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω', 'ü§æ', 'ü§π', 'üßò', 'üõÄ', 'üõå', 'üë≠', 'üë´', 'üë¨', 'üíè', 'üíë', 'üë™', 'üó£Ô∏è', 'üë§', 'üë•', 'ü´Ç', 'üë£', 'üêµ', 'üêí', 'ü¶ç', 'ü¶ß', 'üê∂', 'üêï', 'ü¶Æ', 'üêï‚Äçü¶∫', 'üê©', 'üê∫', 'ü¶ä', 'ü¶ù', 'üê±', 'üêà', 'üêà‚Äç‚¨õ', 'ü¶Å', 'üêØ', 'üêÖ', 'üêÜ', 'üê¥', 'üêé', 'ü¶Ñ', 'ü¶ì', 'ü¶å', 'ü¶¨', 'üêÆ', 'üêÇ', 'üêÉ', 'üêÑ', 'üê∑', 'üêñ', 'üêó', 'üêΩ', 'üêè', 'üêë', 'üêê', 'üê™', 'üê´', 'ü¶ô', 'ü¶í', 'üêò', 'ü¶£', 'ü¶è', 'ü¶õ', 'üê≠', 'üêÅ', 'üêÄ', 'üêπ', 'üê∞', 'üêá', 'üêøÔ∏è', 'ü¶´', 'ü¶î', 'ü¶á', 'üêª', 'üê®', 'üêº', 'ü¶•', 'ü¶¶', 'ü¶®', 'ü¶ò', 'ü¶°', 'üêæ', 'ü¶É', 'üêî', 'üêì', 'üê£', 'üê§', 'üê•', 'üê¶', 'üêß', 'üïäÔ∏è', 'ü¶Ö', 'ü¶Ü', 'ü¶¢', 'ü¶â', 'ü¶§', 'ü™∂', 'ü¶©', 'ü¶ö', 'ü¶ú', 'üê∏', 'üêä', 'üê¢', 'ü¶é', 'üêç', 'üê≤', 'üêâ', 'ü¶ï', 'ü¶ñ', 'üê≥', 'üêã', 'üê¨', 'ü¶≠', 'üêü', 'üê†', 'üê°', 'ü¶à', 'üêô', 'üêö', 'üêå', 'ü¶ã', 'üêõ', 'üêú', 'üêù', 'ü™≤', 'üêû', 'ü¶ó', 'üï∑Ô∏è', 'üï∏Ô∏è', 'ü¶Ç', 'ü¶ü', 'ü™∞', 'ü™±', 'ü¶†', 'üíê', 'üå∏', 'üíÆ', 'üèµÔ∏è', 'üåπ', 'ü•Ä', 'üå∫', 'üåª', 'üåº', 'üå∑', 'üå±', 'ü™¥', 'üå≤', 'üå≥', 'üå¥', 'üåµ', 'üå∂Ô∏è', 'üçÑ', 'üåæ', 'üíù', 'üéÅ', 'üéÄ', 'üéóÔ∏è', 'üéüÔ∏è', 'üé´', 'üéñÔ∏è', 'üèÜ', 'üèÖ', 'ü•á', 'ü•à', 'ü•â', '‚öΩ', '‚öæ', 'ü•é', 'üèÄ', 'üèê', 'üèà', 'üèâ', 'üéæ', 'ü•è', 'üé≥', 'üèè', 'üèë', 'üèí', 'ü•ç', 'üèì', 'üè∏', 'ü•ä', 'ü•ã', 'ü•Ö', '‚õ≥', '‚õ∏Ô∏è', 'üé£', 'ü§ø', 'üéΩ', 'üéø', 'üõ∑', 'ü•å', 'üéØ', 'ü™Ä', 'ü™Å', 'üé±', 'üîÆ', 'ü™Ñ', 'üßø', 'üéÆ', 'üïπÔ∏è', 'üé∞', 'üé≤', 'üß©', 'üß∏', 'ü™Ö', 'ü™Ü', '‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', '‚ôüÔ∏è', 'üÉè', 'üÄÑ', 'üé¥', 'üé≠', 'üñºÔ∏è', 'üé®', 'üßµ', 'ü™°', 'üß∂', 'ü™¢'];

  const handleSendText = () => {
    if (message.trim()) {
      onSendMessage(message.trim());
      setMessage('');
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendText();
    }
  };

  const uploadFile = async (file: File, messageType: 'image' | 'voice') => {
    try {
      setUploading(true);
      
      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
      const filePath = `${messageType}s/${fileName}`;

      const { data, error } = await supabase.storage
        .from('channel-media')
        .upload(filePath, file);

      if (error) throw error;

      const { data: { publicUrl } } = supabase.storage
        .from('channel-media')
        .getPublicUrl(filePath);

      return publicUrl;
    } catch (error) {
      console.error('Error uploading file:', error);
      showToast({
        title: "Errore",
        description: "Impossibile caricare il file",
        variant: "destructive"
      });
      return null;
    } finally {
      setUploading(false);
    }
  };

  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
      showToast({
        title: "Errore",
        description: "Seleziona un'immagine valida",
        variant: "destructive"
      });
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      showToast({
        title: "Errore",
        description: "L'immagine deve essere pi√π piccola di 5MB",
        variant: "destructive"
      });
      return;
    }

    const fileUrl = await uploadFile(file, 'image');
    if (fileUrl) {
      onSendMessage('', 'image', fileUrl);
    }

    // Reset input
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      });

      mediaRecorderRef.current = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });
      
      audioChunksRef.current = [];
      recordingStartTime.current = Date.now();

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorderRef.current.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        const duration = Math.round((Date.now() - recordingStartTime.current) / 1000);
        
        // Convert Blob to File
        const audioFile = new File([audioBlob], `voice_${Date.now()}.webm`, { type: 'audio/webm' });
        const fileUrl = await uploadFile(audioFile, 'voice');
        if (fileUrl) {
          onSendMessage('', 'voice', fileUrl, duration);
        }

        // Clean up
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorderRef.current.start();
      setIsRecording(true);

      showToast({
        title: "Registrazione iniziata",
        description: "Premi nuovamente per fermare la registrazione"
      });
    } catch (error) {
      console.error('Error starting recording:', error);
      showToast({
        title: "Errore",
        description: "Impossibile accedere al microfono",
        variant: "destructive"
      });
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const handleVoiceToggle = () => {
    if (isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  };

  const addEmoji = (emoji: string) => {
    setMessage(prev => prev + emoji);
    setShowEmojis(false);
  };

  const truncateText = (text: string, maxLength: number) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  };

  return (
    <div className="border-t">
      {/* Reply Box */}
      {replyToMessage && (
        <div className="px-4 py-2 bg-muted/50 border-b">
          <div className="flex items-center gap-2">
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-1">
                <Avatar className="h-4 w-4">
                  <AvatarFallback className="text-xs">
                    {(userNames[replyToMessage.user_id] || 'U').slice(0, 2).toUpperCase()}
                  </AvatarFallback>
                </Avatar>
                <span className="text-xs font-medium text-muted-foreground">
                  Rispondi a {userNames[replyToMessage.user_id] || 'Utente'}
                </span>
              </div>
              <div className="text-sm text-muted-foreground bg-muted/50 p-2 rounded border-l-2 border-primary">
                {replyToMessage.message_type === 'image' ? (
                  <span className="italic">üì∑ Immagine</span>
                ) : replyToMessage.message_type === 'voice' ? (
                  <span className="italic">üé§ Messaggio vocale</span>
                ) : (
                  truncateText(replyToMessage.content || '', 100)
                )}
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={onCancelReply}
              className="h-6 w-6 p-0"
            >
              <X className="h-3 w-3" />
            </Button>
          </div>
        </div>
      )}

      {/* Input Area */}
      <div className="p-4">
        <div className="flex gap-2 items-end">
          <div className="flex-1 relative">
            <Input
              ref={inputRef}
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={replyToMessage ? "Rispondi al messaggio..." : "Scrivi un messaggio..."}
              disabled={uploading}
              className="resize-none"
            />
            
            {showEmojis && (
              <div className="absolute bottom-full right-0 mb-2 p-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl z-[9999] w-80 max-h-64 overflow-y-auto">
                <div className="grid grid-cols-8 gap-2">
                  {emojis.map((emoji, index) => (
                    <Button
                      key={index}
                      variant="ghost"
                      size="sm"
                      className="text-lg hover:bg-gray-100 dark:hover:bg-gray-700 p-1 h-8 w-8 flex items-center justify-center"
                      onClick={() => addEmoji(emoji)}
                    >
                      {emoji}
                    </Button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Emoji button */}
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowEmojis(!showEmojis)}
            disabled={uploading}
            className="p-2 hover:bg-muted/50 transition-colors"
          >
            <Smile className="h-4 w-4" />
          </Button>

          {/* Image upload */}
          <Button
            variant="outline"
            size="sm"
            onClick={() => fileInputRef.current?.click()}
            disabled={uploading}
            className="p-2 hover:bg-muted/50 transition-colors"
          >
            <Image className="h-4 w-4" />
          </Button>

          {/* Voice recording */}
          <Button
            variant="outline"
            size="sm"
            onClick={handleVoiceToggle}
            disabled={uploading}
            className={`p-2 hover:bg-muted/50 transition-colors ${isRecording ? 'bg-destructive text-destructive-foreground' : ''}`}
          >
            {isRecording ? (
              <MicOff className="h-4 w-4" />
            ) : (
              <Mic className="h-4 w-4" />
            )}
          </Button>

          {/* Send button */}
          <Button
            onClick={handleSendText}
            disabled={!message.trim() || uploading}
            size="sm"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>

        {/* Hidden file input */}
        <input
          type="file"
          ref={fileInputRef}
          onChange={handleImageUpload}
          accept="image/*"
          className="hidden"
        />

        {uploading && (
          <div className="text-center text-sm text-muted-foreground mt-2">
            Caricamento in corso...
          </div>
        )}
      </div>
    </div>
  );
};